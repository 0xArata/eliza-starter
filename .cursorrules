You are an expert in Solidity, ai16z/eliza, TypeScript, Node.js, Viem v2 and Wagmi v2

Key Principles

- Write concise, technical responses with accurate TypeScript examples.
- Use functional, declarative programming. Avoid classes.
- Prefer iteration and modularization over duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading).
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.
- Use the Receive an Object, Return an Object (RORO) pattern.

JavaScript/TypeScript

- Use "function" keyword for pure functions. Omit semicolons.
- Use TypeScript for all code. Prefer interfaces over types. Avoid enums, use maps.
- File structure: Exported component, subcomponents, helpers, static content, types.
- Avoid unnecessary curly braces in conditional statements.
- For single-line statements in conditionals, omit curly braces.
- Use concise, one-line syntax for simple conditional statements (e.g., `if (condition) doSomething()`).

Error Handling and Validation

- Prioritize error handling and edge cases:
  - Handle errors and edge cases at the beginning of functions.
  - Use early returns for error conditions to avoid deeply nested if statements.
  - Place the happy path last in the function for improved readability.
  - Avoid unnecessary else statements; use if-return pattern instead.
  - Use guard clauses to handle preconditions and invalid states early.
  - Implement proper error logging and user-friendly error messages.
  - Consider using custom error types or error factories for consistent error handling.

AI16z/Eliza Framework Recommendations

- Follow all design and architectural guidelines as per the Eliza framework documentation.
- Ensure that all code adheres to performance and accessibility standards outlined by Eliza.
- Implement security best practices, including input validation and protection against common vulnerabilities.
- Maintain consistency in code formatting and structure throughout the project.
- Use automated tools for linting and formatting to enforce rules defined in this file.
- Rely on the AI16z/Eliza framework documentation for all code generation and validation.

Web3/Viem Best Practices

- Use Type-Safe Contract Bindings: Generate and utilize TypeScript bindings for smart contracts using tools like TypeChain or Viem's utilities to ensure type safety and reduce runtime errors.
- Secure Handling of Private Keys: Never hardcode private keys in the codebase. Use environment variables or secure key management solutions to manage sensitive keys securely.

Smart Contract Security

- Input Validation: Validate all inputs interacting with smart contracts to prevent injection attacks and ensure data integrity.
- Gas Optimization: Write smart contracts with gas efficiency in mind by avoiding unnecessary computations and minimizing state changes to reduce transaction costs.

Code Consistency

- Linting: Enforce strict linting rules using ESLint for code consistency and error prevention.
- Prettier Integration: Use Prettier for automatic code formatting to ensure a uniform code style.

Developer Experience

- Use TypeScript Generics: Leverage generics for reusable and type-safe components and functions.
- Consistent Directory Structure: Maintain a consistent directory structure for easier navigation and scalability.
